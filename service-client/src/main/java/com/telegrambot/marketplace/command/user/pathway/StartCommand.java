package com.telegrambot.marketplace.command.user.pathway;

import com.telegrambot.marketplace.command.Command;
import com.telegrambot.marketplace.config.typehandlers.CommandHandler;
import com.telegrambot.marketplace.dto.Answer;
import com.telegrambot.marketplace.entity.location.Country;
import com.telegrambot.marketplace.entity.user.User;
import com.telegrambot.marketplace.dto.ClassifiedUpdate;
import com.telegrambot.marketplace.enums.StateType;
import com.telegrambot.marketplace.enums.UserType;
import com.telegrambot.marketplace.dto.SendMessageBuilder;
import com.telegrambot.marketplace.service.entity.CountryService;
import com.telegrambot.marketplace.service.entity.StateService;
import com.telegrambot.marketplace.service.entity.UserService;
import lombok.AllArgsConstructor;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Component
@AllArgsConstructor
@Slf4j
public class StartCommand implements Command {

    private final UserService userService;
    private final StateService stateService;
    private final CountryService countryService;

    @Override
    public Class handler() {
        return CommandHandler.class;
    }

    @Override
    public Object getFindBy() {
        return "/start";
    }

    @SneakyThrows
    @Override
    public Answer getAnswer(final ClassifiedUpdate update, final User user) {
        log.info("/start command pressed");
        User newOrExistingUser = userService.findUserByUpdate(update);
        log.info(newOrExistingUser.toString());

        if (Objects.equals(newOrExistingUser.getPassword(), "")) {
            // New user, ask to set a password
            newOrExistingUser.getState().setStateType(StateType.CREATE_PASSWORD);
            stateService.save(newOrExistingUser.getState());
            userService.save(newOrExistingUser);
            return new SendMessageBuilder()
                    .chatId(newOrExistingUser.getChatId())
                    .message("Welcome " + newOrExistingUser.getUserName() + "! " +
                            "This your HASHNAME generated by our service: " + newOrExistingUser.getChatId() +
                            ". It may be used by your friends who will use your referral." +
                            " Please set a CYPHER for your account by replying with text to this message. " +
                            "It is required to transfer balance from your old shop account, in case " +
                            "of loss of old Telegram account, to your new shop account.")
                    .build();
        } else if (!UserType.ADMIN.equals(user.getPermissions())
                && !UserType.MODERATOR.equals(user.getPermissions())
                && !UserType.COURIER.equals(user.getPermissions())) {
            return new SendMessageBuilder()
                    .chatId(user.getChatId())
                    .message("Welcome back! Please select a Country:")
                    .buttons(getCountryButtons())
                    .build();
        } else if (UserType.COURIER.equals(user.getPermissions())) {
            if (StateType.ADD_PRODUCT_PORTION.equals(user.getState().getStateType())) {
                user.getState().setStateType(StateType.PRODUCT_PORTION_COUNTRY_CITY_DISTRICT);
                stateService.save(user.getState());
                userService.save(user);
                return new SendMessageBuilder()
                        .chatId(user.getChatId())
                        .message("Please provide the country, city, and district separated by spaces.")
                        .build();
            } else {
                return new SendMessageBuilder()
                        .chatId(user.getChatId())
                        .message("Welcome courier: " + user.getChatId() +  "! Please start creating a ProductPortion:")
                        .buttons(addProductPortionButton(user))
                        .build();
            }
        } else if (UserType.MODERATOR.equals(user.getPermissions())) {
            return null;
        } else if (UserType.ADMIN.equals(user.getPermissions())) {
            return new SendMessageBuilder().chatId(user.getChatId()).message("Welcome Admin! List of Commands: " +
                    "/admin_add_country_ <country>, " +
                    "/admin_add_city_ <country> <city>, " +
                    "/admin_add_district_ <country> <city> <district>, " +
                    "/admin_add_product_category_ <category>, " +
                    "/admin_add_product_subcategory_ <category> <subcategory>, " +
                    "/admin_add_product_ <subcategory> <name> <price>, " +
                    "/admin_toggle_country_availability_ <country>, " +
                    "/admin_toggle_city_availability_ <country> <city>, " +
                    "/admin_toggle_district_availability_ <country> <city> <district>, " +
                    "/admin_toggle_category_availability_ <category>, " +
                    "/admin_toggle_subcategory_availability_ <subcategory>, " +
                    "/admin_toggle_product_availability_ <subcategory> <product>, " +
                    "/admin_statistics_product_inventory_city_stats, " +
                    "/admin_statistics_product_inventory_district_stats, " +
                    "/admin_statistics_available_countries, " +
                    "/admin_statistics_unavailable_countries, " +
                    "/admin_statistics_available_cities, " +
                    "/admin_statistics_unavailable_cities, " +
                    "/admin_statistics_available_districts, " +
                    "/admin_statistics_unavailable_districts, " +
                    "/admin_statistics_available_product_categories, " +
                    "/admin_statistics_unavailable_product_categories, " +
                    "/admin_statistics_available_product_subcategories, " +
                    "/admin_statistics_unavailable_product_subcategories, " +
                    "/admin_statistics_available_products, " +
                    "/admin_statistics_unavailable_products, " +
                    "/admin_statistics_user_count, " +
                    "/admin_statistics_sum_user_balances ").build();
        }
        return null;
    }

    private List<InlineKeyboardButton> getCountryButtons() {
        List<Country> countries = countryService.findAllByAllowedIsTrue();
        List<InlineKeyboardButton> buttons = new ArrayList<>();
        buttons.add(InlineKeyboardButton.builder()
                .text("View Basket")
                .callbackData("/basket_")
                .build());
        buttons.add(InlineKeyboardButton.builder()
                .text("View Profile")
                .callbackData("/profile_")
                .build());
        buttons.add(InlineKeyboardButton.builder()
                .text("Add Balance")
                .callbackData("/add_balance_")
                .build());
        for (Country country : countries) {
            buttons.add(InlineKeyboardButton.builder()
                    .text(String.valueOf(country.getName()))
                    .callbackData("/country_" + country.getName())
                    .build());
        }
        return buttons;
    }

    private List<InlineKeyboardButton> addProductPortionButton(final User user) {
        // Set the user state to ADD_PRODUCT_PORTION to start the form
        user.getState().setStateType(StateType.ADD_PRODUCT_PORTION);
        stateService.save(user.getState());
        userService.save(user);

        // Return the button to start the form fill process
        List<InlineKeyboardButton> buttons = new ArrayList<>();
        buttons.add(InlineKeyboardButton.builder()
                .text("Start ProductPortion Form")
                .callbackData("/start_productportion_form")
                .build());
        return buttons;
    }

}
