package com.telegrambot.marketplace.command;

import com.telegrambot.marketplace.dto.Answer;
import com.telegrambot.marketplace.entity.location.Country;
import com.telegrambot.marketplace.entity.user.User;
import com.telegrambot.marketplace.dto.ClassifiedUpdate;
import com.telegrambot.marketplace.enums.StateType;
import com.telegrambot.marketplace.service.SendMessageBuilder;
import com.telegrambot.marketplace.service.entity.CountryService;
import com.telegrambot.marketplace.service.entity.StateService;
import com.telegrambot.marketplace.service.entity.UserService;
import com.telegrambot.marketplace.service.handler.CommandHandler;
import lombok.AllArgsConstructor;
import lombok.SneakyThrows;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Component
@AllArgsConstructor
public class StartCommand implements Command {

    private final UserService userService;
    private final StateService stateService;
    private final CountryService countryService;

    @Override
    public Class handler() {
        return CommandHandler.class;
    }

    @Override
    public Object getFindBy() {
        return "/start";
    }

    @SneakyThrows
    @Override
    public Answer getAnswer(final ClassifiedUpdate update, final User user) {
        User newOrExistingUser = userService.findUserByUpdate(update);

        if (Objects.equals(newOrExistingUser.getPassword(), "")) {
            // New user, ask to set a password
            newOrExistingUser.getState().setStateType(StateType.CREATE_PASSWORD);
            stateService.save(newOrExistingUser.getState());
            userService.save(newOrExistingUser);
            return new SendMessageBuilder()
                    .chatId(newOrExistingUser.getChatId())
                    .message("Welcome" + newOrExistingUser.getUserName() + "! " +
                            "This your hashName generated by our service: " + newOrExistingUser.getChatId() +
                            ". It may be used by your friends who will use your referral." +
                            " Please set a cypher for your account by replying with text to this message. " +
                            "It is required to transfer balance from your old shop account, which is not available " +
                            "due to loss of Telegram account, to your new shop account. More information in HELP")
                    .build();
        } else {
            return new SendMessageBuilder()
                    .chatId(user.getChatId())
                    .message("Welcome back! Please select a country:")
                    .buttons(getCountryButtons())
                    .build();
        }
    }

    private List<InlineKeyboardButton> getCountryButtons() {
        List<Country> countries = countryService.findAllByAllowedIsTrue();
        List<InlineKeyboardButton> buttons = new ArrayList<>();
        for (Country country : countries) {
            buttons.add(InlineKeyboardButton.builder()
                    .text(String.valueOf(country.getName()))
                    .callbackData("/country_" + country.getName())
                    .build());        }
        return buttons;
    }
}
